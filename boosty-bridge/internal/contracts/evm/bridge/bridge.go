// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bridge

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// BridgeMetaData contains all meta data concerning the Bridge contract.
var BridgeMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyUsedSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AmountExceedBridgePool\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AmountExceedCommissionPool\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpiredSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignature\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stableCommissionPercent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasCommission\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"destinationChain\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"destinationAddress\",\"type\":\"string\"}],\"name\":\"BridgeFundsIn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"sourceChain\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"sourceAddress\",\"type\":\"string\"}],\"name\":\"BridgeFundsOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawCommission\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"HUNDRED_PERCENT\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasCommission\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"destinationChain\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"destinationAddress\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"bridgeIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"sourceChain\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"sourceAddress\",\"type\":\"string\"}],\"name\":\"bridgeOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getCommissionPoolAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStableCommissionPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasCommission\",\"type\":\"uint256\"}],\"name\":\"getTotalCommission\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stableCommissionPercent_\",\"type\":\"uint256\"}],\"name\":\"setStableCommissionPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commission\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"transferOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawCommission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040526101906002553480156200001757600080fd5b5060405162002f1738038062002f1783398181016040528101906200003d9190620001f9565b80806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200009f62000093620000c160201b60201c565b620000c960201b60201c565b6000600160146101000a81548160ff021916908315150217905550506200022b565b600033905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001c18262000194565b9050919050565b620001d381620001b4565b8114620001df57600080fd5b50565b600081519050620001f381620001c8565b92915050565b6000602082840312156200021257620002116200018f565b5b60006200022284828501620001e2565b91505092915050565b612cdc806200023b6000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c8063715018a6116100975780638da5cb5b116100665780638da5cb5b14610212578063cd9523ac14610230578063e1224f9a14610260578063f2fde38b1461027c576100f5565b8063715018a6146101c65780637556d8f9146101d05780638214f590146101ec5780638456cb5914610208576100f5565b806355d7047a116100d357806355d7047a146101525780635c975abb1461016e57806363e087231461018c5780636ed93dd0146101a8576100f5565b806321b15c89146100fa5780632e699dfc146101185780633f4ba83a14610148575b600080fd5b610102610298565b60405161010f9190611ab0565b60405180910390f35b610132600480360381019061012d9190611b33565b6102a2565b60405161013f9190611ab0565b60405180910390f35b610150610367565b005b61016c60048036038101906101679190611c47565b6103ed565b005b6101766106a0565b6040516101839190611d7a565b60405180910390f35b6101a660048036038101906101a19190611d95565b6106b7565b005b6101b061087e565b6040516101bd9190611e61565b60405180910390f35b6101ce610884565b005b6101ea60048036038101906101e59190611e7c565b61090c565b005b61020660048036038101906102019190611ea9565b610992565b005b610210610ba6565b005b61021a610c2c565b6040516102279190611f87565b60405180910390f35b61024a60048036038101906102459190611fa2565b610c56565b6040516102579190611ab0565b60405180910390f35b61027a60048036038101906102759190611fe2565b610c95565b005b61029660048036038101906102919190611b33565b610e07565b005b6000600254905090565b60006102ac610efe565b73ffffffffffffffffffffffffffffffffffffffff166102ca610c2c565b73ffffffffffffffffffffffffffffffffffffffff1614610320576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103179061207f565b60405180910390fd5b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b61036f610efe565b73ffffffffffffffffffffffffffffffffffffffff1661038d610c2c565b73ffffffffffffffffffffffffffffffffffffffff16146103e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103da9061207f565b60405180910390fd5b6103eb610f06565b565b6103f56106a0565b15610435576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042c906120eb565b60405180910390fd5b6003600084815260200190815260200160002060009054906101000a900460ff161561048d576040517f8fa6fce300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b834211156104c7576040517fdf4cc36d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6105686104d2610efe565b8c8c8c8c8c8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508a8a8a8a610fa8565b60016003600085815260200190815260200160002060006101000a81548160ff02191690831515021790555060006105a08b8b610c56565b905080600460008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105f1919061213a565b9250508190555061062c610603610efe565b308d8f73ffffffffffffffffffffffffffffffffffffffff16611025909392919063ffffffff16565b83610635610efe565b73ffffffffffffffffffffffffffffffffffffffff167f702f486f4d225a476770977c5edd22b4cb48bcd23d5b8969ce41f43a61bfc55f8e8e6002548f8f8f8f8f60405161068a9897969594939291906121bb565b60405180910390a3505050505050505050505050565b6000600160149054906101000a900460ff16905090565b6106bf6106a0565b156106ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f6906120eb565b60405180910390fd5b6003600084815260200190815260200160002060009054906101000a900460ff1615610757576040517f8fa6fce300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610766878787878787876110ae565b60016003600085815260200190815260200160002060006101000a81548160ff02191690831515021790555083600460008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546107e1919061222e565b92505081905550600084866107f6919061213a565b905061082387828a73ffffffffffffffffffffffffffffffffffffffff166111259092919063ffffffff16565b838773ffffffffffffffffffffffffffffffffffffffff167fb76d3af340299c6f68881ffa6ae947c69c22b102275b27ae9366e04644fae99d8a8460405161086c929190612262565b60405180910390a35050505050505050565b61271081565b61088c610efe565b73ffffffffffffffffffffffffffffffffffffffff166108aa610c2c565b73ffffffffffffffffffffffffffffffffffffffff1614610900576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f79061207f565b60405180910390fd5b61090a60006111ab565b565b610914610efe565b73ffffffffffffffffffffffffffffffffffffffff16610932610c2c565b73ffffffffffffffffffffffffffffffffffffffff1614610988576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097f9061207f565b60405180910390fd5b8060028190555050565b61099a610efe565b73ffffffffffffffffffffffffffffffffffffffff166109b8610c2c565b73ffffffffffffffffffffffffffffffffffffffff1614610a0e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a059061207f565b60405180910390fd5b60008873ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610a499190611f87565b602060405180830381865afa158015610a66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a8a91906122a0565b90506000600460008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482610ad9919061222e565b905080881115610b15576040517f474a06c500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610b4089898c73ffffffffffffffffffffffffffffffffffffffff166111259092919063ffffffff16565b8873ffffffffffffffffffffffffffffffffffffffff167f49d702ae53b5ebfb2f512df63324a7d1915a152a6faacf2c29a64b7740441ed58b8a8a8a8a8a8a604051610b9297969594939291906122cd565b60405180910390a250505050505050505050565b610bae610efe565b73ffffffffffffffffffffffffffffffffffffffff16610bcc610c2c565b73ffffffffffffffffffffffffffffffffffffffff1614610c22576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c199061207f565b60405180910390fd5b610c2a611271565b565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008061271061ffff1660025485610c6e9190612332565b610c7891906123a3565b905060008382610c88919061213a565b9050809250505092915050565b610c9d610efe565b73ffffffffffffffffffffffffffffffffffffffff16610cbb610c2c565b73ffffffffffffffffffffffffffffffffffffffff1614610d11576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d089061207f565b60405180910390fd5b80600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610d8a576040517f59bea00c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610db533828473ffffffffffffffffffffffffffffffffffffffff166111259092919063ffffffff16565b8173ffffffffffffffffffffffffffffffffffffffff167f2a016beab1c9536945a8f4c51b734f24f9d1458b765600efdabb6a3c52251e7582604051610dfb9190611ab0565b60405180910390a25050565b610e0f610efe565b73ffffffffffffffffffffffffffffffffffffffff16610e2d610c2c565b73ffffffffffffffffffffffffffffffffffffffff1614610e83576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e7a9061207f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610ef2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ee990612446565b60405180910390fd5b610efb816111ab565b50565b600033905090565b610f0e6106a0565b610f4d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f44906124b2565b60405180910390fd5b6000600160146101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa610f91610efe565b604051610f9e9190611f87565b60405180910390a1565b610fe360008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610fdc8c8c8c8c8c8c8c8c611313565b8484611360565b611019576040517f8baa579f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050505050505050565b6110a8846323b872dd60e01b858585604051602401611046939291906124d2565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506113e8565b50505050565b6110e660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff166110df89898989896114af565b8484611360565b61111c576040517f8baa579f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050505050565b6111a68363a9059cbb60e01b8484604051602401611144929190612262565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506113e8565b505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6112796106a0565b156112b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112b0906120eb565b60405180910390fd5b60018060146101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586112fc610efe565b6040516113099190611f87565b60405180910390a1565b600061135289898989898989896040516020016113379897969594939291906125e3565b604051602081830303815290604052805190602001206114f3565b905098975050505050505050565b60006113b08484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050611523565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16149050949350505050565b600061144a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff1661154a9092919063ffffffff16565b90506000815111156114aa578080602001905181019061146a9190612699565b6114a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114a090612738565b60405180910390fd5b5b505050565b60006114e886868686866040516020016114cd959493929190612758565b604051602081830303815290604052805190602001206114f3565b905095945050505050565b600081604051602001611506919061282e565b604051602081830303815290604052805190602001209050919050565b60008060006115328585611562565b9150915061153f816115e3565b819250505092915050565b606061155984846000856117af565b90509392505050565b60008060418351036115a35760008060006020860151925060408601519150606086015160001a9050611597878285856118c3565b945094505050506115dc565b60408351036115d35760008060208501519150604085015190506115c88683836119cf565b9350935050506115dc565b60006002915091505b9250929050565b600060048111156115f7576115f6612854565b5b81600481111561160a57611609612854565b5b03156117ac576001600481111561162457611623612854565b5b81600481111561163757611636612854565b5b03611677576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161166e906128cf565b60405180910390fd5b6002600481111561168b5761168a612854565b5b81600481111561169e5761169d612854565b5b036116de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116d59061293b565b60405180910390fd5b600360048111156116f2576116f1612854565b5b81600481111561170557611704612854565b5b03611745576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161173c906129cd565b60405180910390fd5b60048081111561175857611757612854565b5b81600481111561176b5761176a612854565b5b036117ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117a290612a5f565b60405180910390fd5b5b50565b6060824710156117f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117eb90612af1565b60405180910390fd5b6117fd85611a1d565b61183c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161183390612b5d565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516118659190612bc4565b60006040518083038185875af1925050503d80600081146118a2576040519150601f19603f3d011682016040523d82523d6000602084013e6118a7565b606091505b50915091506118b7828286611a30565b92505050949350505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c11156118fe5760006003915091506119c6565b601b8560ff16141580156119165750601c8560ff1614155b156119285760006004915091506119c6565b60006001878787876040516000815260200160405260405161194d9493929190612c06565b6020604051602081039080840390855afa15801561196f573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036119bd576000600192509250506119c6565b80600092509250505b94509492505050565b6000806000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff85169150601b8560ff1c019050611a0f878288856118c3565b935093505050935093915050565b600080823b905060008111915050919050565b60608315611a4057829050611a90565b600083511115611a535782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a879190612c84565b60405180910390fd5b9392505050565b6000819050919050565b611aaa81611a97565b82525050565b6000602082019050611ac56000830184611aa1565b92915050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611b0082611ad5565b9050919050565b611b1081611af5565b8114611b1b57600080fd5b50565b600081359050611b2d81611b07565b92915050565b600060208284031215611b4957611b48611acb565b5b6000611b5784828501611b1e565b91505092915050565b611b6981611a97565b8114611b7457600080fd5b50565b600081359050611b8681611b60565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112611bb157611bb0611b8c565b5b8235905067ffffffffffffffff811115611bce57611bcd611b91565b5b602083019150836001820283011115611bea57611be9611b96565b5b9250929050565b60008083601f840112611c0757611c06611b8c565b5b8235905067ffffffffffffffff811115611c2457611c23611b91565b5b602083019150836001820283011115611c4057611c3f611b96565b5b9250929050565b60008060008060008060008060008060006101008c8e031215611c6d57611c6c611acb565b5b6000611c7b8e828f01611b1e565b9b50506020611c8c8e828f01611b77565b9a50506040611c9d8e828f01611b77565b99505060608c013567ffffffffffffffff811115611cbe57611cbd611ad0565b5b611cca8e828f01611b9b565b985098505060808c013567ffffffffffffffff811115611ced57611cec611ad0565b5b611cf98e828f01611b9b565b965096505060a0611d0c8e828f01611b77565b94505060c0611d1d8e828f01611b77565b93505060e08c013567ffffffffffffffff811115611d3e57611d3d611ad0565b5b611d4a8e828f01611bf1565b92509250509295989b509295989b9093969950565b60008115159050919050565b611d7481611d5f565b82525050565b6000602082019050611d8f6000830184611d6b565b92915050565b600080600080600080600060c0888a031215611db457611db3611acb565b5b6000611dc28a828b01611b1e565b9750506020611dd38a828b01611b1e565b9650506040611de48a828b01611b77565b9550506060611df58a828b01611b77565b9450506080611e068a828b01611b77565b93505060a088013567ffffffffffffffff811115611e2757611e26611ad0565b5b611e338a828b01611bf1565b925092505092959891949750929550565b600061ffff82169050919050565b611e5b81611e44565b82525050565b6000602082019050611e766000830184611e52565b92915050565b600060208284031215611e9257611e91611acb565b5b6000611ea084828501611b77565b91505092915050565b60008060008060008060008060c0898b031215611ec957611ec8611acb565b5b6000611ed78b828c01611b1e565b9850506020611ee88b828c01611b1e565b9750506040611ef98b828c01611b77565b9650506060611f0a8b828c01611b77565b955050608089013567ffffffffffffffff811115611f2b57611f2a611ad0565b5b611f378b828c01611b9b565b945094505060a089013567ffffffffffffffff811115611f5a57611f59611ad0565b5b611f668b828c01611b9b565b92509250509295985092959890939650565b611f8181611af5565b82525050565b6000602082019050611f9c6000830184611f78565b92915050565b60008060408385031215611fb957611fb8611acb565b5b6000611fc785828601611b77565b9250506020611fd885828601611b77565b9150509250929050565b60008060408385031215611ff957611ff8611acb565b5b600061200785828601611b1e565b925050602061201885828601611b77565b9150509250929050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000612069602083612022565b915061207482612033565b602082019050919050565b600060208201905081810360008301526120988161205c565b9050919050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b60006120d5601083612022565b91506120e08261209f565b602082019050919050565b60006020820190508181036000830152612104816120c8565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061214582611a97565b915061215083611a97565b92508282019050808211156121685761216761210b565b5b92915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b600061219a8385612022565b93506121a783858461216e565b6121b08361217d565b840190509392505050565b600060c0820190506121d0600083018b611f78565b6121dd602083018a611aa1565b6121ea6040830189611aa1565b6121f76060830188611aa1565b818103608083015261220a81868861218e565b905081810360a083015261221f81848661218e565b90509998505050505050505050565b600061223982611a97565b915061224483611a97565b925082820390508181111561225c5761225b61210b565b5b92915050565b60006040820190506122776000830185611f78565b6122846020830184611aa1565b9392505050565b60008151905061229a81611b60565b92915050565b6000602082840312156122b6576122b5611acb565b5b60006122c48482850161228b565b91505092915050565b600060a0820190506122e2600083018a611f78565b6122ef6020830189611aa1565b6122fc6040830188611aa1565b818103606083015261230f81868861218e565b9050818103608083015261232481848661218e565b905098975050505050505050565b600061233d82611a97565b915061234883611a97565b925082820261235681611a97565b9150828204841483151761236d5761236c61210b565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006123ae82611a97565b91506123b983611a97565b9250826123c9576123c8612374565b5b828204905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612430602683612022565b915061243b826123d4565b604082019050919050565b6000602082019050818103600083015261245f81612423565b9050919050565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b600061249c601483612022565b91506124a782612466565b602082019050919050565b600060208201905081810360008301526124cb8161248f565b9050919050565b60006060820190506124e76000830186611f78565b6124f46020830185611f78565b6125016040830184611aa1565b949350505050565b60008160601b9050919050565b600061252182612509565b9050919050565b600061253382612516565b9050919050565b61254b61254682611af5565b612528565b82525050565b6000819050919050565b61256c61256782611a97565b612551565b82525050565b600081519050919050565b600081905092915050565b60005b838110156125a657808201518184015260208101905061258b565b60008484015250505050565b60006125bd82612572565b6125c7818561257d565b93506125d7818560208601612588565b80840191505092915050565b60006125ef828b61253a565b6014820191506125ff828a61253a565b60148201915061260f828961255b565b60208201915061261f828861255b565b60208201915061262f82876125b2565b915061263b82866125b2565b9150612647828561255b565b602082019150612657828461255b565b6020820191508190509998505050505050505050565b61267681611d5f565b811461268157600080fd5b50565b6000815190506126938161266d565b92915050565b6000602082840312156126af576126ae611acb565b5b60006126bd84828501612684565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000612722602a83612022565b915061272d826126c6565b604082019050919050565b6000602082019050818103600083015261275181612715565b9050919050565b6000612764828861253a565b601482019150612774828761253a565b601482019150612784828661255b565b602082019150612794828561255b565b6020820191506127a4828461255b565b6020820191508190509695505050505050565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b60006127ed601c8361257d565b91506127f8826127b7565b601c82019050919050565b6000819050919050565b6000819050919050565b61282861282382612803565b61280d565b82525050565b6000612839826127e0565b91506128458284612817565b60208201915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b60006128b9601883612022565b91506128c482612883565b602082019050919050565b600060208201905081810360008301526128e8816128ac565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b6000612925601f83612022565b9150612930826128ef565b602082019050919050565b6000602082019050818103600083015261295481612918565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b60006129b7602283612022565b91506129c28261295b565b604082019050919050565b600060208201905081810360008301526129e6816129aa565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b6000612a49602283612022565b9150612a54826129ed565b604082019050919050565b60006020820190508181036000830152612a7881612a3c565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000612adb602683612022565b9150612ae682612a7f565b604082019050919050565b60006020820190508181036000830152612b0a81612ace565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000612b47601d83612022565b9150612b5282612b11565b602082019050919050565b60006020820190508181036000830152612b7681612b3a565b9050919050565b600081519050919050565b600081905092915050565b6000612b9e82612b7d565b612ba88185612b88565b9350612bb8818560208601612588565b80840191505092915050565b6000612bd08284612b93565b915081905092915050565b612be481612803565b82525050565b600060ff82169050919050565b612c0081612bea565b82525050565b6000608082019050612c1b6000830187612bdb565b612c286020830186612bf7565b612c356040830185612bdb565b612c426060830184612bdb565b95945050505050565b6000612c5682612572565b612c608185612022565b9350612c70818560208601612588565b612c798161217d565b840191505092915050565b60006020820190508181036000830152612c9e8184612c4b565b90509291505056fea264697066735822122057b77a991e95b71be29f37b37edb7588d911fbcebb0918b4c1d6cd149723e57364736f6c63430008110033",
}

// BridgeABI is the input ABI used to generate the binding from.
// Deprecated: Use BridgeMetaData.ABI instead.
var BridgeABI = BridgeMetaData.ABI

// BridgeBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BridgeMetaData.Bin instead.
var BridgeBin = BridgeMetaData.Bin

// DeployBridge deploys a new Ethereum contract, binding an instance of Bridge to it.
func DeployBridge(auth *bind.TransactOpts, backend bind.ContractBackend, signer common.Address) (common.Address, *types.Transaction, *Bridge, error) {
	parsed, err := BridgeMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BridgeBin), backend, signer)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Bridge{BridgeCaller: BridgeCaller{contract: contract}, BridgeTransactor: BridgeTransactor{contract: contract}, BridgeFilterer: BridgeFilterer{contract: contract}}, nil
}

// Bridge is an auto generated Go binding around an Ethereum contract.
type Bridge struct {
	BridgeCaller     // Read-only binding to the contract
	BridgeTransactor // Write-only binding to the contract
	BridgeFilterer   // Log filterer for contract events
}

// BridgeCaller is an auto generated read-only Go binding around an Ethereum contract.
type BridgeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BridgeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BridgeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BridgeSession struct {
	Contract     *Bridge           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BridgeCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BridgeCallerSession struct {
	Contract *BridgeCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// BridgeTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BridgeTransactorSession struct {
	Contract     *BridgeTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BridgeRaw is an auto generated low-level Go binding around an Ethereum contract.
type BridgeRaw struct {
	Contract *Bridge // Generic contract binding to access the raw methods on
}

// BridgeCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BridgeCallerRaw struct {
	Contract *BridgeCaller // Generic read-only contract binding to access the raw methods on
}

// BridgeTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BridgeTransactorRaw struct {
	Contract *BridgeTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBridge creates a new instance of Bridge, bound to a specific deployed contract.
func NewBridge(address common.Address, backend bind.ContractBackend) (*Bridge, error) {
	contract, err := bindBridge(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Bridge{BridgeCaller: BridgeCaller{contract: contract}, BridgeTransactor: BridgeTransactor{contract: contract}, BridgeFilterer: BridgeFilterer{contract: contract}}, nil
}

// NewBridgeCaller creates a new read-only instance of Bridge, bound to a specific deployed contract.
func NewBridgeCaller(address common.Address, caller bind.ContractCaller) (*BridgeCaller, error) {
	contract, err := bindBridge(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BridgeCaller{contract: contract}, nil
}

// NewBridgeTransactor creates a new write-only instance of Bridge, bound to a specific deployed contract.
func NewBridgeTransactor(address common.Address, transactor bind.ContractTransactor) (*BridgeTransactor, error) {
	contract, err := bindBridge(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BridgeTransactor{contract: contract}, nil
}

// NewBridgeFilterer creates a new log filterer instance of Bridge, bound to a specific deployed contract.
func NewBridgeFilterer(address common.Address, filterer bind.ContractFilterer) (*BridgeFilterer, error) {
	contract, err := bindBridge(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BridgeFilterer{contract: contract}, nil
}

// bindBridge binds a generic wrapper to an already deployed contract.
func bindBridge(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BridgeABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Bridge *BridgeRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Bridge.Contract.BridgeCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Bridge *BridgeRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bridge.Contract.BridgeTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Bridge *BridgeRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Bridge.Contract.BridgeTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Bridge *BridgeCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Bridge.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Bridge *BridgeTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bridge.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Bridge *BridgeTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Bridge.Contract.contract.Transact(opts, method, params...)
}

// HUNDREDPERCENT is a free data retrieval call binding the contract method 0x6ed93dd0.
//
// Solidity: function HUNDRED_PERCENT() view returns(uint16)
func (_Bridge *BridgeCaller) HUNDREDPERCENT(opts *bind.CallOpts) (uint16, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "HUNDRED_PERCENT")

	if err != nil {
		return *new(uint16), err
	}

	out0 := *abi.ConvertType(out[0], new(uint16)).(*uint16)

	return out0, err

}

// HUNDREDPERCENT is a free data retrieval call binding the contract method 0x6ed93dd0.
//
// Solidity: function HUNDRED_PERCENT() view returns(uint16)
func (_Bridge *BridgeSession) HUNDREDPERCENT() (uint16, error) {
	return _Bridge.Contract.HUNDREDPERCENT(&_Bridge.CallOpts)
}

// HUNDREDPERCENT is a free data retrieval call binding the contract method 0x6ed93dd0.
//
// Solidity: function HUNDRED_PERCENT() view returns(uint16)
func (_Bridge *BridgeCallerSession) HUNDREDPERCENT() (uint16, error) {
	return _Bridge.Contract.HUNDREDPERCENT(&_Bridge.CallOpts)
}

// GetCommissionPoolAmount is a free data retrieval call binding the contract method 0x2e699dfc.
//
// Solidity: function getCommissionPoolAmount(address token) view returns(uint256)
func (_Bridge *BridgeCaller) GetCommissionPoolAmount(opts *bind.CallOpts, token common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "getCommissionPoolAmount", token)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetCommissionPoolAmount is a free data retrieval call binding the contract method 0x2e699dfc.
//
// Solidity: function getCommissionPoolAmount(address token) view returns(uint256)
func (_Bridge *BridgeSession) GetCommissionPoolAmount(token common.Address) (*big.Int, error) {
	return _Bridge.Contract.GetCommissionPoolAmount(&_Bridge.CallOpts, token)
}

// GetCommissionPoolAmount is a free data retrieval call binding the contract method 0x2e699dfc.
//
// Solidity: function getCommissionPoolAmount(address token) view returns(uint256)
func (_Bridge *BridgeCallerSession) GetCommissionPoolAmount(token common.Address) (*big.Int, error) {
	return _Bridge.Contract.GetCommissionPoolAmount(&_Bridge.CallOpts, token)
}

// GetStableCommissionPercent is a free data retrieval call binding the contract method 0x21b15c89.
//
// Solidity: function getStableCommissionPercent() view returns(uint256)
func (_Bridge *BridgeCaller) GetStableCommissionPercent(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "getStableCommissionPercent")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetStableCommissionPercent is a free data retrieval call binding the contract method 0x21b15c89.
//
// Solidity: function getStableCommissionPercent() view returns(uint256)
func (_Bridge *BridgeSession) GetStableCommissionPercent() (*big.Int, error) {
	return _Bridge.Contract.GetStableCommissionPercent(&_Bridge.CallOpts)
}

// GetStableCommissionPercent is a free data retrieval call binding the contract method 0x21b15c89.
//
// Solidity: function getStableCommissionPercent() view returns(uint256)
func (_Bridge *BridgeCallerSession) GetStableCommissionPercent() (*big.Int, error) {
	return _Bridge.Contract.GetStableCommissionPercent(&_Bridge.CallOpts)
}

// GetTotalCommission is a free data retrieval call binding the contract method 0xcd9523ac.
//
// Solidity: function getTotalCommission(uint256 amount, uint256 gasCommission) view returns(uint256)
func (_Bridge *BridgeCaller) GetTotalCommission(opts *bind.CallOpts, amount *big.Int, gasCommission *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "getTotalCommission", amount, gasCommission)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTotalCommission is a free data retrieval call binding the contract method 0xcd9523ac.
//
// Solidity: function getTotalCommission(uint256 amount, uint256 gasCommission) view returns(uint256)
func (_Bridge *BridgeSession) GetTotalCommission(amount *big.Int, gasCommission *big.Int) (*big.Int, error) {
	return _Bridge.Contract.GetTotalCommission(&_Bridge.CallOpts, amount, gasCommission)
}

// GetTotalCommission is a free data retrieval call binding the contract method 0xcd9523ac.
//
// Solidity: function getTotalCommission(uint256 amount, uint256 gasCommission) view returns(uint256)
func (_Bridge *BridgeCallerSession) GetTotalCommission(amount *big.Int, gasCommission *big.Int) (*big.Int, error) {
	return _Bridge.Contract.GetTotalCommission(&_Bridge.CallOpts, amount, gasCommission)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Bridge *BridgeCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Bridge *BridgeSession) Owner() (common.Address, error) {
	return _Bridge.Contract.Owner(&_Bridge.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Bridge *BridgeCallerSession) Owner() (common.Address, error) {
	return _Bridge.Contract.Owner(&_Bridge.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Bridge *BridgeCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Bridge *BridgeSession) Paused() (bool, error) {
	return _Bridge.Contract.Paused(&_Bridge.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Bridge *BridgeCallerSession) Paused() (bool, error) {
	return _Bridge.Contract.Paused(&_Bridge.CallOpts)
}

// BridgeIn is a paid mutator transaction binding the contract method 0x55d7047a.
//
// Solidity: function bridgeIn(address token, uint256 amount, uint256 gasCommission, string destinationChain, string destinationAddress, uint256 deadline, uint256 nonce, bytes signature) returns()
func (_Bridge *BridgeTransactor) BridgeIn(opts *bind.TransactOpts, token common.Address, amount *big.Int, gasCommission *big.Int, destinationChain string, destinationAddress string, deadline *big.Int, nonce *big.Int, signature []byte) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "bridgeIn", token, amount, gasCommission, destinationChain, destinationAddress, deadline, nonce, signature)
}

// BridgeIn is a paid mutator transaction binding the contract method 0x55d7047a.
//
// Solidity: function bridgeIn(address token, uint256 amount, uint256 gasCommission, string destinationChain, string destinationAddress, uint256 deadline, uint256 nonce, bytes signature) returns()
func (_Bridge *BridgeSession) BridgeIn(token common.Address, amount *big.Int, gasCommission *big.Int, destinationChain string, destinationAddress string, deadline *big.Int, nonce *big.Int, signature []byte) (*types.Transaction, error) {
	return _Bridge.Contract.BridgeIn(&_Bridge.TransactOpts, token, amount, gasCommission, destinationChain, destinationAddress, deadline, nonce, signature)
}

// BridgeIn is a paid mutator transaction binding the contract method 0x55d7047a.
//
// Solidity: function bridgeIn(address token, uint256 amount, uint256 gasCommission, string destinationChain, string destinationAddress, uint256 deadline, uint256 nonce, bytes signature) returns()
func (_Bridge *BridgeTransactorSession) BridgeIn(token common.Address, amount *big.Int, gasCommission *big.Int, destinationChain string, destinationAddress string, deadline *big.Int, nonce *big.Int, signature []byte) (*types.Transaction, error) {
	return _Bridge.Contract.BridgeIn(&_Bridge.TransactOpts, token, amount, gasCommission, destinationChain, destinationAddress, deadline, nonce, signature)
}

// BridgeOut is a paid mutator transaction binding the contract method 0x8214f590.
//
// Solidity: function bridgeOut(address token, address recipient, uint256 amount, uint256 transactionId, string sourceChain, string sourceAddress) returns()
func (_Bridge *BridgeTransactor) BridgeOut(opts *bind.TransactOpts, token common.Address, recipient common.Address, amount *big.Int, transactionId *big.Int, sourceChain string, sourceAddress string) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "bridgeOut", token, recipient, amount, transactionId, sourceChain, sourceAddress)
}

// BridgeOut is a paid mutator transaction binding the contract method 0x8214f590.
//
// Solidity: function bridgeOut(address token, address recipient, uint256 amount, uint256 transactionId, string sourceChain, string sourceAddress) returns()
func (_Bridge *BridgeSession) BridgeOut(token common.Address, recipient common.Address, amount *big.Int, transactionId *big.Int, sourceChain string, sourceAddress string) (*types.Transaction, error) {
	return _Bridge.Contract.BridgeOut(&_Bridge.TransactOpts, token, recipient, amount, transactionId, sourceChain, sourceAddress)
}

// BridgeOut is a paid mutator transaction binding the contract method 0x8214f590.
//
// Solidity: function bridgeOut(address token, address recipient, uint256 amount, uint256 transactionId, string sourceChain, string sourceAddress) returns()
func (_Bridge *BridgeTransactorSession) BridgeOut(token common.Address, recipient common.Address, amount *big.Int, transactionId *big.Int, sourceChain string, sourceAddress string) (*types.Transaction, error) {
	return _Bridge.Contract.BridgeOut(&_Bridge.TransactOpts, token, recipient, amount, transactionId, sourceChain, sourceAddress)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_Bridge *BridgeTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_Bridge *BridgeSession) Pause() (*types.Transaction, error) {
	return _Bridge.Contract.Pause(&_Bridge.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_Bridge *BridgeTransactorSession) Pause() (*types.Transaction, error) {
	return _Bridge.Contract.Pause(&_Bridge.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Bridge *BridgeTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Bridge *BridgeSession) RenounceOwnership() (*types.Transaction, error) {
	return _Bridge.Contract.RenounceOwnership(&_Bridge.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Bridge *BridgeTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Bridge.Contract.RenounceOwnership(&_Bridge.TransactOpts)
}

// SetStableCommissionPercent is a paid mutator transaction binding the contract method 0x7556d8f9.
//
// Solidity: function setStableCommissionPercent(uint256 stableCommissionPercent_) returns()
func (_Bridge *BridgeTransactor) SetStableCommissionPercent(opts *bind.TransactOpts, stableCommissionPercent_ *big.Int) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "setStableCommissionPercent", stableCommissionPercent_)
}

// SetStableCommissionPercent is a paid mutator transaction binding the contract method 0x7556d8f9.
//
// Solidity: function setStableCommissionPercent(uint256 stableCommissionPercent_) returns()
func (_Bridge *BridgeSession) SetStableCommissionPercent(stableCommissionPercent_ *big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.SetStableCommissionPercent(&_Bridge.TransactOpts, stableCommissionPercent_)
}

// SetStableCommissionPercent is a paid mutator transaction binding the contract method 0x7556d8f9.
//
// Solidity: function setStableCommissionPercent(uint256 stableCommissionPercent_) returns()
func (_Bridge *BridgeTransactorSession) SetStableCommissionPercent(stableCommissionPercent_ *big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.SetStableCommissionPercent(&_Bridge.TransactOpts, stableCommissionPercent_)
}

// TransferOut is a paid mutator transaction binding the contract method 0x63e08723.
//
// Solidity: function transferOut(address token, address recipient, uint256 amount, uint256 commission, uint256 nonce, bytes signature) returns()
func (_Bridge *BridgeTransactor) TransferOut(opts *bind.TransactOpts, token common.Address, recipient common.Address, amount *big.Int, commission *big.Int, nonce *big.Int, signature []byte) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "transferOut", token, recipient, amount, commission, nonce, signature)
}

// TransferOut is a paid mutator transaction binding the contract method 0x63e08723.
//
// Solidity: function transferOut(address token, address recipient, uint256 amount, uint256 commission, uint256 nonce, bytes signature) returns()
func (_Bridge *BridgeSession) TransferOut(token common.Address, recipient common.Address, amount *big.Int, commission *big.Int, nonce *big.Int, signature []byte) (*types.Transaction, error) {
	return _Bridge.Contract.TransferOut(&_Bridge.TransactOpts, token, recipient, amount, commission, nonce, signature)
}

// TransferOut is a paid mutator transaction binding the contract method 0x63e08723.
//
// Solidity: function transferOut(address token, address recipient, uint256 amount, uint256 commission, uint256 nonce, bytes signature) returns()
func (_Bridge *BridgeTransactorSession) TransferOut(token common.Address, recipient common.Address, amount *big.Int, commission *big.Int, nonce *big.Int, signature []byte) (*types.Transaction, error) {
	return _Bridge.Contract.TransferOut(&_Bridge.TransactOpts, token, recipient, amount, commission, nonce, signature)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Bridge *BridgeTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Bridge *BridgeSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.TransferOwnership(&_Bridge.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Bridge *BridgeTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.TransferOwnership(&_Bridge.TransactOpts, newOwner)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_Bridge *BridgeTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "unpause")
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_Bridge *BridgeSession) Unpause() (*types.Transaction, error) {
	return _Bridge.Contract.Unpause(&_Bridge.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_Bridge *BridgeTransactorSession) Unpause() (*types.Transaction, error) {
	return _Bridge.Contract.Unpause(&_Bridge.TransactOpts)
}

// WithdrawCommission is a paid mutator transaction binding the contract method 0xe1224f9a.
//
// Solidity: function withdrawCommission(address token, uint256 amount) returns()
func (_Bridge *BridgeTransactor) WithdrawCommission(opts *bind.TransactOpts, token common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "withdrawCommission", token, amount)
}

// WithdrawCommission is a paid mutator transaction binding the contract method 0xe1224f9a.
//
// Solidity: function withdrawCommission(address token, uint256 amount) returns()
func (_Bridge *BridgeSession) WithdrawCommission(token common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.WithdrawCommission(&_Bridge.TransactOpts, token, amount)
}

// WithdrawCommission is a paid mutator transaction binding the contract method 0xe1224f9a.
//
// Solidity: function withdrawCommission(address token, uint256 amount) returns()
func (_Bridge *BridgeTransactorSession) WithdrawCommission(token common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.WithdrawCommission(&_Bridge.TransactOpts, token, amount)
}

// BridgeBridgeFundsInIterator is returned from FilterBridgeFundsIn and is used to iterate over the raw logs and unpacked data for BridgeFundsIn events raised by the Bridge contract.
type BridgeBridgeFundsInIterator struct {
	Event *BridgeBridgeFundsIn // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeBridgeFundsInIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeBridgeFundsIn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeBridgeFundsIn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeBridgeFundsInIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeBridgeFundsInIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeBridgeFundsIn represents a BridgeFundsIn event raised by the Bridge contract.
type BridgeBridgeFundsIn struct {
	Sender                  common.Address
	Nonce                   *big.Int
	Token                   common.Address
	Amount                  *big.Int
	StableCommissionPercent *big.Int
	GasCommission           *big.Int
	DestinationChain        string
	DestinationAddress      string
	Raw                     types.Log // Blockchain specific contextual infos
}

// FilterBridgeFundsIn is a free log retrieval operation binding the contract event 0x702f486f4d225a476770977c5edd22b4cb48bcd23d5b8969ce41f43a61bfc55f.
//
// Solidity: event BridgeFundsIn(address indexed sender, uint256 indexed nonce, address token, uint256 amount, uint256 stableCommissionPercent, uint256 gasCommission, string destinationChain, string destinationAddress)
func (_Bridge *BridgeFilterer) FilterBridgeFundsIn(opts *bind.FilterOpts, sender []common.Address, nonce []*big.Int) (*BridgeBridgeFundsInIterator, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}
	var nonceRule []interface{}
	for _, nonceItem := range nonce {
		nonceRule = append(nonceRule, nonceItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "BridgeFundsIn", senderRule, nonceRule)
	if err != nil {
		return nil, err
	}
	return &BridgeBridgeFundsInIterator{contract: _Bridge.contract, event: "BridgeFundsIn", logs: logs, sub: sub}, nil
}

// WatchBridgeFundsIn is a free log subscription operation binding the contract event 0x702f486f4d225a476770977c5edd22b4cb48bcd23d5b8969ce41f43a61bfc55f.
//
// Solidity: event BridgeFundsIn(address indexed sender, uint256 indexed nonce, address token, uint256 amount, uint256 stableCommissionPercent, uint256 gasCommission, string destinationChain, string destinationAddress)
func (_Bridge *BridgeFilterer) WatchBridgeFundsIn(opts *bind.WatchOpts, sink chan<- *BridgeBridgeFundsIn, sender []common.Address, nonce []*big.Int) (event.Subscription, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}
	var nonceRule []interface{}
	for _, nonceItem := range nonce {
		nonceRule = append(nonceRule, nonceItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "BridgeFundsIn", senderRule, nonceRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeBridgeFundsIn)
				if err := _Bridge.contract.UnpackLog(event, "BridgeFundsIn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBridgeFundsIn is a log parse operation binding the contract event 0x702f486f4d225a476770977c5edd22b4cb48bcd23d5b8969ce41f43a61bfc55f.
//
// Solidity: event BridgeFundsIn(address indexed sender, uint256 indexed nonce, address token, uint256 amount, uint256 stableCommissionPercent, uint256 gasCommission, string destinationChain, string destinationAddress)
func (_Bridge *BridgeFilterer) ParseBridgeFundsIn(log types.Log) (*BridgeBridgeFundsIn, error) {
	event := new(BridgeBridgeFundsIn)
	if err := _Bridge.contract.UnpackLog(event, "BridgeFundsIn", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeBridgeFundsOutIterator is returned from FilterBridgeFundsOut and is used to iterate over the raw logs and unpacked data for BridgeFundsOut events raised by the Bridge contract.
type BridgeBridgeFundsOutIterator struct {
	Event *BridgeBridgeFundsOut // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeBridgeFundsOutIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeBridgeFundsOut)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeBridgeFundsOut)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeBridgeFundsOutIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeBridgeFundsOutIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeBridgeFundsOut represents a BridgeFundsOut event raised by the Bridge contract.
type BridgeBridgeFundsOut struct {
	Recipient     common.Address
	Token         common.Address
	Amount        *big.Int
	TransactionId *big.Int
	SourceChain   string
	SourceAddress string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterBridgeFundsOut is a free log retrieval operation binding the contract event 0x49d702ae53b5ebfb2f512df63324a7d1915a152a6faacf2c29a64b7740441ed5.
//
// Solidity: event BridgeFundsOut(address indexed recipient, address token, uint256 amount, uint256 transactionId, string sourceChain, string sourceAddress)
func (_Bridge *BridgeFilterer) FilterBridgeFundsOut(opts *bind.FilterOpts, recipient []common.Address) (*BridgeBridgeFundsOutIterator, error) {

	var recipientRule []interface{}
	for _, recipientItem := range recipient {
		recipientRule = append(recipientRule, recipientItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "BridgeFundsOut", recipientRule)
	if err != nil {
		return nil, err
	}
	return &BridgeBridgeFundsOutIterator{contract: _Bridge.contract, event: "BridgeFundsOut", logs: logs, sub: sub}, nil
}

// WatchBridgeFundsOut is a free log subscription operation binding the contract event 0x49d702ae53b5ebfb2f512df63324a7d1915a152a6faacf2c29a64b7740441ed5.
//
// Solidity: event BridgeFundsOut(address indexed recipient, address token, uint256 amount, uint256 transactionId, string sourceChain, string sourceAddress)
func (_Bridge *BridgeFilterer) WatchBridgeFundsOut(opts *bind.WatchOpts, sink chan<- *BridgeBridgeFundsOut, recipient []common.Address) (event.Subscription, error) {

	var recipientRule []interface{}
	for _, recipientItem := range recipient {
		recipientRule = append(recipientRule, recipientItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "BridgeFundsOut", recipientRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeBridgeFundsOut)
				if err := _Bridge.contract.UnpackLog(event, "BridgeFundsOut", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBridgeFundsOut is a log parse operation binding the contract event 0x49d702ae53b5ebfb2f512df63324a7d1915a152a6faacf2c29a64b7740441ed5.
//
// Solidity: event BridgeFundsOut(address indexed recipient, address token, uint256 amount, uint256 transactionId, string sourceChain, string sourceAddress)
func (_Bridge *BridgeFilterer) ParseBridgeFundsOut(log types.Log) (*BridgeBridgeFundsOut, error) {
	event := new(BridgeBridgeFundsOut)
	if err := _Bridge.contract.UnpackLog(event, "BridgeFundsOut", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Bridge contract.
type BridgeOwnershipTransferredIterator struct {
	Event *BridgeOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeOwnershipTransferred represents a OwnershipTransferred event raised by the Bridge contract.
type BridgeOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Bridge *BridgeFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*BridgeOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &BridgeOwnershipTransferredIterator{contract: _Bridge.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Bridge *BridgeFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *BridgeOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeOwnershipTransferred)
				if err := _Bridge.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Bridge *BridgeFilterer) ParseOwnershipTransferred(log types.Log) (*BridgeOwnershipTransferred, error) {
	event := new(BridgeOwnershipTransferred)
	if err := _Bridge.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgePausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the Bridge contract.
type BridgePausedIterator struct {
	Event *BridgePaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgePausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgePaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgePaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgePausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgePausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgePaused represents a Paused event raised by the Bridge contract.
type BridgePaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Bridge *BridgeFilterer) FilterPaused(opts *bind.FilterOpts) (*BridgePausedIterator, error) {

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &BridgePausedIterator{contract: _Bridge.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Bridge *BridgeFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *BridgePaused) (event.Subscription, error) {

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgePaused)
				if err := _Bridge.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Bridge *BridgeFilterer) ParsePaused(log types.Log) (*BridgePaused, error) {
	event := new(BridgePaused)
	if err := _Bridge.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeTransferOutIterator is returned from FilterTransferOut and is used to iterate over the raw logs and unpacked data for TransferOut events raised by the Bridge contract.
type BridgeTransferOutIterator struct {
	Event *BridgeTransferOut // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeTransferOutIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeTransferOut)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeTransferOut)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeTransferOutIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeTransferOutIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeTransferOut represents a TransferOut event raised by the Bridge contract.
type BridgeTransferOut struct {
	Recipient common.Address
	Nonce     *big.Int
	Token     common.Address
	Amount    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterTransferOut is a free log retrieval operation binding the contract event 0xb76d3af340299c6f68881ffa6ae947c69c22b102275b27ae9366e04644fae99d.
//
// Solidity: event TransferOut(address indexed recipient, uint256 indexed nonce, address token, uint256 amount)
func (_Bridge *BridgeFilterer) FilterTransferOut(opts *bind.FilterOpts, recipient []common.Address, nonce []*big.Int) (*BridgeTransferOutIterator, error) {

	var recipientRule []interface{}
	for _, recipientItem := range recipient {
		recipientRule = append(recipientRule, recipientItem)
	}
	var nonceRule []interface{}
	for _, nonceItem := range nonce {
		nonceRule = append(nonceRule, nonceItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "TransferOut", recipientRule, nonceRule)
	if err != nil {
		return nil, err
	}
	return &BridgeTransferOutIterator{contract: _Bridge.contract, event: "TransferOut", logs: logs, sub: sub}, nil
}

// WatchTransferOut is a free log subscription operation binding the contract event 0xb76d3af340299c6f68881ffa6ae947c69c22b102275b27ae9366e04644fae99d.
//
// Solidity: event TransferOut(address indexed recipient, uint256 indexed nonce, address token, uint256 amount)
func (_Bridge *BridgeFilterer) WatchTransferOut(opts *bind.WatchOpts, sink chan<- *BridgeTransferOut, recipient []common.Address, nonce []*big.Int) (event.Subscription, error) {

	var recipientRule []interface{}
	for _, recipientItem := range recipient {
		recipientRule = append(recipientRule, recipientItem)
	}
	var nonceRule []interface{}
	for _, nonceItem := range nonce {
		nonceRule = append(nonceRule, nonceItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "TransferOut", recipientRule, nonceRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeTransferOut)
				if err := _Bridge.contract.UnpackLog(event, "TransferOut", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransferOut is a log parse operation binding the contract event 0xb76d3af340299c6f68881ffa6ae947c69c22b102275b27ae9366e04644fae99d.
//
// Solidity: event TransferOut(address indexed recipient, uint256 indexed nonce, address token, uint256 amount)
func (_Bridge *BridgeFilterer) ParseTransferOut(log types.Log) (*BridgeTransferOut, error) {
	event := new(BridgeTransferOut)
	if err := _Bridge.contract.UnpackLog(event, "TransferOut", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the Bridge contract.
type BridgeUnpausedIterator struct {
	Event *BridgeUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeUnpaused represents a Unpaused event raised by the Bridge contract.
type BridgeUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Bridge *BridgeFilterer) FilterUnpaused(opts *bind.FilterOpts) (*BridgeUnpausedIterator, error) {

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &BridgeUnpausedIterator{contract: _Bridge.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Bridge *BridgeFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *BridgeUnpaused) (event.Subscription, error) {

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeUnpaused)
				if err := _Bridge.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Bridge *BridgeFilterer) ParseUnpaused(log types.Log) (*BridgeUnpaused, error) {
	event := new(BridgeUnpaused)
	if err := _Bridge.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeWithdrawCommissionIterator is returned from FilterWithdrawCommission and is used to iterate over the raw logs and unpacked data for WithdrawCommission events raised by the Bridge contract.
type BridgeWithdrawCommissionIterator struct {
	Event *BridgeWithdrawCommission // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeWithdrawCommissionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeWithdrawCommission)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeWithdrawCommission)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeWithdrawCommissionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeWithdrawCommissionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeWithdrawCommission represents a WithdrawCommission event raised by the Bridge contract.
type BridgeWithdrawCommission struct {
	Token  common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterWithdrawCommission is a free log retrieval operation binding the contract event 0x2a016beab1c9536945a8f4c51b734f24f9d1458b765600efdabb6a3c52251e75.
//
// Solidity: event WithdrawCommission(address indexed token, uint256 amount)
func (_Bridge *BridgeFilterer) FilterWithdrawCommission(opts *bind.FilterOpts, token []common.Address) (*BridgeWithdrawCommissionIterator, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "WithdrawCommission", tokenRule)
	if err != nil {
		return nil, err
	}
	return &BridgeWithdrawCommissionIterator{contract: _Bridge.contract, event: "WithdrawCommission", logs: logs, sub: sub}, nil
}

// WatchWithdrawCommission is a free log subscription operation binding the contract event 0x2a016beab1c9536945a8f4c51b734f24f9d1458b765600efdabb6a3c52251e75.
//
// Solidity: event WithdrawCommission(address indexed token, uint256 amount)
func (_Bridge *BridgeFilterer) WatchWithdrawCommission(opts *bind.WatchOpts, sink chan<- *BridgeWithdrawCommission, token []common.Address) (event.Subscription, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "WithdrawCommission", tokenRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeWithdrawCommission)
				if err := _Bridge.contract.UnpackLog(event, "WithdrawCommission", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawCommission is a log parse operation binding the contract event 0x2a016beab1c9536945a8f4c51b734f24f9d1458b765600efdabb6a3c52251e75.
//
// Solidity: event WithdrawCommission(address indexed token, uint256 amount)
func (_Bridge *BridgeFilterer) ParseWithdrawCommission(log types.Log) (*BridgeWithdrawCommission, error) {
	event := new(BridgeWithdrawCommission)
	if err := _Bridge.contract.UnpackLog(event, "WithdrawCommission", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
