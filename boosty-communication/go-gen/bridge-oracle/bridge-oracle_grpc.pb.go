// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: bridge-oracle/bridge-oracle.proto

package pb_bridge_oracle

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BridgeOracleClient is the client API for BridgeOracle service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BridgeOracleClient interface {
	PriceStream(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (BridgeOracle_PriceStreamClient, error)
}

type bridgeOracleClient struct {
	cc grpc.ClientConnInterface
}

func NewBridgeOracleClient(cc grpc.ClientConnInterface) BridgeOracleClient {
	return &bridgeOracleClient{cc}
}

func (c *bridgeOracleClient) PriceStream(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (BridgeOracle_PriceStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &BridgeOracle_ServiceDesc.Streams[0], "/tricorn.BridgeOracle/PriceStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &bridgeOraclePriceStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BridgeOracle_PriceStreamClient interface {
	Recv() (*PriceUpdate, error)
	grpc.ClientStream
}

type bridgeOraclePriceStreamClient struct {
	grpc.ClientStream
}

func (x *bridgeOraclePriceStreamClient) Recv() (*PriceUpdate, error) {
	m := new(PriceUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BridgeOracleServer is the server API for BridgeOracle service.
// All implementations should embed UnimplementedBridgeOracleServer
// for forward compatibility
type BridgeOracleServer interface {
	PriceStream(*emptypb.Empty, BridgeOracle_PriceStreamServer) error
}

// UnimplementedBridgeOracleServer should be embedded to have forward compatible implementations.
type UnimplementedBridgeOracleServer struct {
}

func (UnimplementedBridgeOracleServer) PriceStream(*emptypb.Empty, BridgeOracle_PriceStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method PriceStream not implemented")
}

// UnsafeBridgeOracleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BridgeOracleServer will
// result in compilation errors.
type UnsafeBridgeOracleServer interface {
	mustEmbedUnimplementedBridgeOracleServer()
}

func RegisterBridgeOracleServer(s grpc.ServiceRegistrar, srv BridgeOracleServer) {
	s.RegisterService(&BridgeOracle_ServiceDesc, srv)
}

func _BridgeOracle_PriceStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BridgeOracleServer).PriceStream(m, &bridgeOraclePriceStreamServer{stream})
}

type BridgeOracle_PriceStreamServer interface {
	Send(*PriceUpdate) error
	grpc.ServerStream
}

type bridgeOraclePriceStreamServer struct {
	grpc.ServerStream
}

func (x *bridgeOraclePriceStreamServer) Send(m *PriceUpdate) error {
	return x.ServerStream.SendMsg(m)
}

// BridgeOracle_ServiceDesc is the grpc.ServiceDesc for BridgeOracle service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BridgeOracle_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tricorn.BridgeOracle",
	HandlerType: (*BridgeOracleServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PriceStream",
			Handler:       _BridgeOracle_PriceStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "bridge-oracle/bridge-oracle.proto",
}
