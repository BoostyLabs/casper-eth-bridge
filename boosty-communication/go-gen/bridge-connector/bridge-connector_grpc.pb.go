// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: bridge-connector/bridge-connector.proto

package pb_bridge_connector

import (
	context "context"
	connector "github.com/BoostyLabs/golden-gate-communication/go-gen/connector"
	networks "github.com/BoostyLabs/golden-gate-communication/go-gen/networks"
	transfers "github.com/BoostyLabs/golden-gate-communication/go-gen/transfers"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConnectorClient is the client API for Connector service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConnectorClient interface {
	// Return metadata of the network this connector provides.
	Network(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*networks.Network, error)
	// Return tokens known by this connector.
	KnownTokens(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*connector.ConnectorTokens, error)
	// Initiate event stream from the network.
	EventStream(ctx context.Context, in *connector.EventsRequest, opts ...grpc.CallOption) (Connector_EventStreamClient, error)
	// Initiate outbound bridge transaction.
	BridgeOut(ctx context.Context, in *connector.TokenOutRequest, opts ...grpc.CallOption) (*connector.TokenOutResponse, error)
	// Estimate a potential transfer.
	EstimateTransfer(ctx context.Context, in *transfers.EstimateTransferRequest, opts ...grpc.CallOption) (*transfers.EstimateTransferResponse, error)
	// Return signature for user to send bridgeIn transaction.
	BridgeInSignature(ctx context.Context, in *transfers.BridgeInSignatureWithNonceRequest, opts ...grpc.CallOption) (*transfers.BridgeInSignatureResponse, error)
	// Return signature for user to return funds.
	CancelSignature(ctx context.Context, in *transfers.CancelSignatureRequest, opts ...grpc.CallOption) (*transfers.CancelSignatureResponse, error)
}

type connectorClient struct {
	cc grpc.ClientConnInterface
}

func NewConnectorClient(cc grpc.ClientConnInterface) ConnectorClient {
	return &connectorClient{cc}
}

func (c *connectorClient) Network(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*networks.Network, error) {
	out := new(networks.Network)
	err := c.cc.Invoke(ctx, "/tricorn.Connector/Network", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorClient) KnownTokens(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*connector.ConnectorTokens, error) {
	out := new(connector.ConnectorTokens)
	err := c.cc.Invoke(ctx, "/tricorn.Connector/KnownTokens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorClient) EventStream(ctx context.Context, in *connector.EventsRequest, opts ...grpc.CallOption) (Connector_EventStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Connector_ServiceDesc.Streams[0], "/tricorn.Connector/EventStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &connectorEventStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Connector_EventStreamClient interface {
	Recv() (*connector.Event, error)
	grpc.ClientStream
}

type connectorEventStreamClient struct {
	grpc.ClientStream
}

func (x *connectorEventStreamClient) Recv() (*connector.Event, error) {
	m := new(connector.Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *connectorClient) BridgeOut(ctx context.Context, in *connector.TokenOutRequest, opts ...grpc.CallOption) (*connector.TokenOutResponse, error) {
	out := new(connector.TokenOutResponse)
	err := c.cc.Invoke(ctx, "/tricorn.Connector/BridgeOut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorClient) EstimateTransfer(ctx context.Context, in *transfers.EstimateTransferRequest, opts ...grpc.CallOption) (*transfers.EstimateTransferResponse, error) {
	out := new(transfers.EstimateTransferResponse)
	err := c.cc.Invoke(ctx, "/tricorn.Connector/EstimateTransfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorClient) BridgeInSignature(ctx context.Context, in *transfers.BridgeInSignatureWithNonceRequest, opts ...grpc.CallOption) (*transfers.BridgeInSignatureResponse, error) {
	out := new(transfers.BridgeInSignatureResponse)
	err := c.cc.Invoke(ctx, "/tricorn.Connector/BridgeInSignature", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorClient) CancelSignature(ctx context.Context, in *transfers.CancelSignatureRequest, opts ...grpc.CallOption) (*transfers.CancelSignatureResponse, error) {
	out := new(transfers.CancelSignatureResponse)
	err := c.cc.Invoke(ctx, "/tricorn.Connector/CancelSignature", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConnectorServer is the server API for Connector service.
// All implementations should embed UnimplementedConnectorServer
// for forward compatibility
type ConnectorServer interface {
	// Return metadata of the network this connector provides.
	Network(context.Context, *emptypb.Empty) (*networks.Network, error)
	// Return tokens known by this connector.
	KnownTokens(context.Context, *emptypb.Empty) (*connector.ConnectorTokens, error)
	// Initiate event stream from the network.
	EventStream(*connector.EventsRequest, Connector_EventStreamServer) error
	// Initiate outbound bridge transaction.
	BridgeOut(context.Context, *connector.TokenOutRequest) (*connector.TokenOutResponse, error)
	// Estimate a potential transfer.
	EstimateTransfer(context.Context, *transfers.EstimateTransferRequest) (*transfers.EstimateTransferResponse, error)
	// Return signature for user to send bridgeIn transaction.
	BridgeInSignature(context.Context, *transfers.BridgeInSignatureWithNonceRequest) (*transfers.BridgeInSignatureResponse, error)
	// Return signature for user to return funds.
	CancelSignature(context.Context, *transfers.CancelSignatureRequest) (*transfers.CancelSignatureResponse, error)
}

// UnimplementedConnectorServer should be embedded to have forward compatible implementations.
type UnimplementedConnectorServer struct {
}

func (UnimplementedConnectorServer) Network(context.Context, *emptypb.Empty) (*networks.Network, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Network not implemented")
}
func (UnimplementedConnectorServer) KnownTokens(context.Context, *emptypb.Empty) (*connector.ConnectorTokens, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KnownTokens not implemented")
}
func (UnimplementedConnectorServer) EventStream(*connector.EventsRequest, Connector_EventStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method EventStream not implemented")
}
func (UnimplementedConnectorServer) BridgeOut(context.Context, *connector.TokenOutRequest) (*connector.TokenOutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BridgeOut not implemented")
}
func (UnimplementedConnectorServer) EstimateTransfer(context.Context, *transfers.EstimateTransferRequest) (*transfers.EstimateTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstimateTransfer not implemented")
}
func (UnimplementedConnectorServer) BridgeInSignature(context.Context, *transfers.BridgeInSignatureWithNonceRequest) (*transfers.BridgeInSignatureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BridgeInSignature not implemented")
}
func (UnimplementedConnectorServer) CancelSignature(context.Context, *transfers.CancelSignatureRequest) (*transfers.CancelSignatureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelSignature not implemented")
}

// UnsafeConnectorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConnectorServer will
// result in compilation errors.
type UnsafeConnectorServer interface {
	mustEmbedUnimplementedConnectorServer()
}

func RegisterConnectorServer(s grpc.ServiceRegistrar, srv ConnectorServer) {
	s.RegisterService(&Connector_ServiceDesc, srv)
}

func _Connector_Network_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorServer).Network(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tricorn.Connector/Network",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorServer).Network(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Connector_KnownTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorServer).KnownTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tricorn.Connector/KnownTokens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorServer).KnownTokens(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Connector_EventStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(connector.EventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConnectorServer).EventStream(m, &connectorEventStreamServer{stream})
}

type Connector_EventStreamServer interface {
	Send(*connector.Event) error
	grpc.ServerStream
}

type connectorEventStreamServer struct {
	grpc.ServerStream
}

func (x *connectorEventStreamServer) Send(m *connector.Event) error {
	return x.ServerStream.SendMsg(m)
}

func _Connector_BridgeOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(connector.TokenOutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorServer).BridgeOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tricorn.Connector/BridgeOut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorServer).BridgeOut(ctx, req.(*connector.TokenOutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Connector_EstimateTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(transfers.EstimateTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorServer).EstimateTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tricorn.Connector/EstimateTransfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorServer).EstimateTransfer(ctx, req.(*transfers.EstimateTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Connector_BridgeInSignature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(transfers.BridgeInSignatureWithNonceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorServer).BridgeInSignature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tricorn.Connector/BridgeInSignature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorServer).BridgeInSignature(ctx, req.(*transfers.BridgeInSignatureWithNonceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Connector_CancelSignature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(transfers.CancelSignatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorServer).CancelSignature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tricorn.Connector/CancelSignature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorServer).CancelSignature(ctx, req.(*transfers.CancelSignatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Connector_ServiceDesc is the grpc.ServiceDesc for Connector service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Connector_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tricorn.Connector",
	HandlerType: (*ConnectorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Network",
			Handler:    _Connector_Network_Handler,
		},
		{
			MethodName: "KnownTokens",
			Handler:    _Connector_KnownTokens_Handler,
		},
		{
			MethodName: "BridgeOut",
			Handler:    _Connector_BridgeOut_Handler,
		},
		{
			MethodName: "EstimateTransfer",
			Handler:    _Connector_EstimateTransfer_Handler,
		},
		{
			MethodName: "BridgeInSignature",
			Handler:    _Connector_BridgeInSignature_Handler,
		},
		{
			MethodName: "CancelSignature",
			Handler:    _Connector_CancelSignature_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EventStream",
			Handler:       _Connector_EventStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "bridge-connector/bridge-connector.proto",
}
