// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: connector-bridge/connector-bridge.proto

package pb_connector_bridge

import (
	context "context"
	signer "github.com/BoostyLabs/golden-gate-communication/go-gen/signer"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConnectorBridgeClient is the client API for ConnectorBridge service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConnectorBridgeClient interface {
	// Return signed data for specific network.
	Sign(ctx context.Context, in *signer.SignRequest, opts ...grpc.CallOption) (*signer.Signature, error)
	// Return public key for specific network.
	PublicKey(ctx context.Context, in *signer.PublicKeyRequest, opts ...grpc.CallOption) (*signer.PublicKeyResponse, error)
}

type connectorBridgeClient struct {
	cc grpc.ClientConnInterface
}

func NewConnectorBridgeClient(cc grpc.ClientConnInterface) ConnectorBridgeClient {
	return &connectorBridgeClient{cc}
}

func (c *connectorBridgeClient) Sign(ctx context.Context, in *signer.SignRequest, opts ...grpc.CallOption) (*signer.Signature, error) {
	out := new(signer.Signature)
	err := c.cc.Invoke(ctx, "/tricorn.ConnectorBridge/Sign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorBridgeClient) PublicKey(ctx context.Context, in *signer.PublicKeyRequest, opts ...grpc.CallOption) (*signer.PublicKeyResponse, error) {
	out := new(signer.PublicKeyResponse)
	err := c.cc.Invoke(ctx, "/tricorn.ConnectorBridge/PublicKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConnectorBridgeServer is the server API for ConnectorBridge service.
// All implementations should embed UnimplementedConnectorBridgeServer
// for forward compatibility
type ConnectorBridgeServer interface {
	// Return signed data for specific network.
	Sign(context.Context, *signer.SignRequest) (*signer.Signature, error)
	// Return public key for specific network.
	PublicKey(context.Context, *signer.PublicKeyRequest) (*signer.PublicKeyResponse, error)
}

// UnimplementedConnectorBridgeServer should be embedded to have forward compatible implementations.
type UnimplementedConnectorBridgeServer struct {
}

func (UnimplementedConnectorBridgeServer) Sign(context.Context, *signer.SignRequest) (*signer.Signature, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sign not implemented")
}
func (UnimplementedConnectorBridgeServer) PublicKey(context.Context, *signer.PublicKeyRequest) (*signer.PublicKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublicKey not implemented")
}

// UnsafeConnectorBridgeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConnectorBridgeServer will
// result in compilation errors.
type UnsafeConnectorBridgeServer interface {
	mustEmbedUnimplementedConnectorBridgeServer()
}

func RegisterConnectorBridgeServer(s grpc.ServiceRegistrar, srv ConnectorBridgeServer) {
	s.RegisterService(&ConnectorBridge_ServiceDesc, srv)
}

func _ConnectorBridge_Sign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(signer.SignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorBridgeServer).Sign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tricorn.ConnectorBridge/Sign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorBridgeServer).Sign(ctx, req.(*signer.SignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorBridge_PublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(signer.PublicKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorBridgeServer).PublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tricorn.ConnectorBridge/PublicKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorBridgeServer).PublicKey(ctx, req.(*signer.PublicKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConnectorBridge_ServiceDesc is the grpc.ServiceDesc for ConnectorBridge service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConnectorBridge_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tricorn.ConnectorBridge",
	HandlerType: (*ConnectorBridgeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sign",
			Handler:    _ConnectorBridge_Sign_Handler,
		},
		{
			MethodName: "PublicKey",
			Handler:    _ConnectorBridge_PublicKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "connector-bridge/connector-bridge.proto",
}
